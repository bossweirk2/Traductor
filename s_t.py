import os
import streamlit as st
from bokeh.models import Button, CustomJS
from streamlit_bokeh_events import streamlit_bokeh_events
from gtts import gTTS
from googletrans import Translator
import random, time, glob

# ------------------ CONFIGURACI√ìN GENERAL ------------------
st.set_page_config(page_title="Traductor Po√©tico Futurista", page_icon="ü™∂", layout="centered")

# ---- ESTILOS FUTURISTAS ----
st.markdown("""
    <style>
    body {
        background-color: #0b0f19;
        color: #e0e0e0;
    }
    .main {
        background: radial-gradient(circle at 20% 20%, #141a2e, #0b0f19 70%);
        border: 1px solid #222;
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 0 25px #00f7ff20;
    }
    h1, h2, h3 {
        color: #8af3ff;
        text-shadow: 0 0 8px #00f7ff80;
    }
    .stButton>button {
        background: linear-gradient(90deg, #00d0ff, #7f00ff);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 0.6em 1.5em;
        font-size: 16px;
        transition: 0.3s;
        font-weight: 600;
    }
    .stButton>button:hover {
        transform: scale(1.05);
        box-shadow: 0 0 15px #00f7ff80;
    }
    .neon {
        color: #a7f7ff;
        text-shadow: 0 0 8px #00f7ff, 0 0 12px #8a2be280;
        font-style: italic;
    }
    .poem-box {
        background-color: #141a2e;
        border: 1px solid #00f7ff30;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 0 12px #00f7ff20;
        font-size: 1.1rem;
        line-height: 1.5;
        color: #e3f6ff;
    }
    </style>
""", unsafe_allow_html=True)

# ------------------ INTERFAZ ------------------
st.title("ü™∂ Traductor Po√©tico Futurista")
st.caption("Convierte tu voz en versos interestelares üåå")

translator = Translator()

# ------------------ CAPTURA DE VOZ ------------------
st.subheader("üéôÔ∏è Habla tu inspiraci√≥n")

stt_button = Button(label="üéß Escuchar tu voz", width=300)
stt_button.js_on_event("button_click", CustomJS(code="""
    var recognition = new webkitSpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.onresult = function (e) {
        var value = "";
        for (var i = e.resultIndex; i < e.results.length; ++i) {
            if (e.results[i].isFinal) {
                value += e.results[i][0].transcript;
            }
        }
        if (value != "") {
            document.dispatchEvent(new CustomEvent("GET_TEXT", {detail: value}));
        }
    }
    recognition.start();
"""))

result = streamlit_bokeh_events(
    stt_button,
    events="GET_TEXT",
    key="listen",
    refresh_on_update=False,
    override_height=75,
)

if result and "GET_TEXT" in result:
    text = result.get("GET_TEXT")
    st.success("‚ú® Texto capturado:")
    st.markdown(f"<div class='neon'>‚Äú{text}‚Äù</div>", unsafe_allow_html=True)
else:
    text = ""

# ------------------ FUNCIONES ------------------

def crear_poema(texto_base):
    """Genera un poema simple basado en el texto de entrada."""
    lineas = [
        f"Entre las sombras del c√≥digo, {texto_base.lower()},",
        f"un susurro viaja entre l√≠neas de luz,",
        f"la m√°quina escucha, siente, traduce,",
        f"y convierte tu voz en un sue√±o azul.",
        f"Tu frase cruza fronteras del alma,",
        f"se vuelve eco en la red estelar,",
        f"donde los bytes respiran calma,",
        f"y las palabras aprenden a amar.",
    ]
    random.shuffle(lineas)
    return "\n".join(lineas)

def text_to_speech(text):
    """Convierte texto a audio con gTTS"""
    tts = gTTS(text, lang="es", tld="com", slow=False)
    os.makedirs("temp", exist_ok=True)
    path = "temp/poema.mp3"
    tts.save(path)
    return path

def remove_old_files():
    for f in glob.glob("temp/*.mp3"):
        if os.stat(f).st_mtime < time.time() - 86400:
            os.remove(f)

remove_old_files()

# ------------------ GENERACI√ìN PO√âTICA ------------------
if st.button("üí´ Generar poema"):
    if text:
        poema = crear_poema(text)
        st.markdown("<div class='poem-box'>" + poema.replace("\n", "<br>") + "</div>", unsafe_allow_html=True)
        st.audio(text_to_speech(poema), format="audio/mp3")
    else:
        st.warning("Por favor, habla algo antes de generar el poema.")

# ------------------ MODO EXTRA: TRADUCCI√ìN ------------------
st.markdown("---")
st.subheader("üåê Traducir el poema (opcional)")

idioma_destino = st.selectbox("Selecciona el idioma de destino", ["Ingl√©s", "Franc√©s", "Japon√©s", "Coreano"])
mapa_idiomas = {"Ingl√©s": "en", "Franc√©s": "fr", "Japon√©s": "ja", "Coreano": "ko"}

if st.button("üåç Traducir poema"):
    if text:
        poema = crear_poema(text)
        traduccion = translator.translate(poema, dest=mapa_idiomas[idioma_destino]).text
        st.markdown(f"#### ‚ú® Poema en {idioma_destino}:")
        st.markdown(f"<div class='poem-box'>{traduccion}</div>", unsafe_allow_html=True)
    else:
        st.warning("Primero genera o graba tu poema.")

# ------------------ FOOTER ------------------
st.markdown("""
---
<div style='text-align:center; color:#777; font-size:0.9rem'>
Hecho con üíô por un algoritmo que sue√±a en binario.<br>
<em>‚ÄúDonde la voz humana se transforma en poes√≠a digital.‚Äù</em>
</div>
""", unsafe_allow_html=True)
